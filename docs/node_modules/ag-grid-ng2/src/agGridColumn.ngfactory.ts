/**
 * This file is generated by the Angular 2 template compiler.
 * Do not edit.
 */
 /* tslint:disable */

import * as import0 from '@angular/core/src/render/api';
import * as import1 from '@angular/core/src/linker/view';
import * as import2 from '@angular/core/src/linker/element';
import * as import3 from './agGridColumn';
import * as import4 from '@angular/core/src/linker/query_list';
import * as import5 from '@angular/core/src/linker/view_utils';
import * as import6 from '@angular/core/src/di/injector';
import * as import7 from '@angular/core/src/linker/view_type';
import * as import8 from '@angular/core/src/change_detection/change_detection';
import * as import9 from '@angular/core/src/metadata/view';
import * as import10 from '@angular/core/src/linker/component_factory';
var renderType_AgGridColumn_Host:import0.RenderComponentType = (null as any);
class _View_AgGridColumn_Host0 extends import1.AppView<any> {
  _el_0:any;
  /*private*/ _appEl_0:import2.AppElement;
  _AgGridColumn_0_4:import3.AgGridColumn;
  _query_AgGridColumn_0_0:import4.QueryList<any>;
  constructor(viewUtils:import5.ViewUtils,parentInjector:import6.Injector,declarationEl:import2.AppElement) {
    super(_View_AgGridColumn_Host0,renderType_AgGridColumn_Host,import7.ViewType.HOST,viewUtils,parentInjector,declarationEl,import8.ChangeDetectorStatus.CheckAlways);
  }
  createInternal(rootSelector:string):import2.AppElement {
    this._el_0 = this.selectOrCreateHostElement('ag-grid-column',rootSelector,(null as any));
    this._appEl_0 = new import2.AppElement(0,(null as any),this,this._el_0);
    var compView_0:any = viewFactory_AgGridColumn0(this.viewUtils,this.injector(0),this._appEl_0);
    this._AgGridColumn_0_4 = new import3.AgGridColumn();
    this._query_AgGridColumn_0_0 = new import4.QueryList<any>();
    this._appEl_0.initComponent(this._AgGridColumn_0_4,[],compView_0);
    compView_0.create(this._AgGridColumn_0_4,this.projectableNodes,(null as any));
    this.init([].concat([this._el_0]),[this._el_0],[],[]);
    return this._appEl_0;
  }
  injectorGetInternal(token:any,requestNodeIndex:number,notFoundResult:any):any {
    if (((token === import3.AgGridColumn) && (0 === requestNodeIndex))) { return this._AgGridColumn_0_4; }
    return notFoundResult;
  }
  detectChangesInternal(throwOnChange:boolean):void {
    this.detectContentChildrenChanges(throwOnChange);
    if (!throwOnChange) { if (this._query_AgGridColumn_0_0.dirty) {
      this._query_AgGridColumn_0_0.reset([this._AgGridColumn_0_4]);
      this._AgGridColumn_0_4.childColumns = this._query_AgGridColumn_0_0;
      this._query_AgGridColumn_0_0.notifyOnChanges();
    } }
    this.detectViewChildrenChanges(throwOnChange);
  }
}
function viewFactory_AgGridColumn_Host0(viewUtils:import5.ViewUtils,parentInjector:import6.Injector,declarationEl:import2.AppElement):import1.AppView<any> {
  if ((renderType_AgGridColumn_Host === (null as any))) { (renderType_AgGridColumn_Host = viewUtils.createRenderComponentType('',0,import9.ViewEncapsulation.None,[],{})); }
  return new _View_AgGridColumn_Host0(viewUtils,parentInjector,declarationEl);
}
export const AgGridColumnNgFactory:import10.ComponentFactory<import3.AgGridColumn> = new import10.ComponentFactory<import3.AgGridColumn>('ag-grid-column',viewFactory_AgGridColumn_Host0,import3.AgGridColumn);
const styles_AgGridColumn:any[] = [];
var renderType_AgGridColumn:import0.RenderComponentType = (null as any);
class _View_AgGridColumn0 extends import1.AppView<import3.AgGridColumn> {
  constructor(viewUtils:import5.ViewUtils,parentInjector:import6.Injector,declarationEl:import2.AppElement) {
    super(_View_AgGridColumn0,renderType_AgGridColumn,import7.ViewType.COMPONENT,viewUtils,parentInjector,declarationEl,import8.ChangeDetectorStatus.CheckAlways);
  }
  createInternal(rootSelector:string):import2.AppElement {
    const parentRenderNode:any = this.renderer.createViewRoot(this.declarationAppElement.nativeElement);
    this.init([],[],[],[]);
    return (null as any);
  }
}
export function viewFactory_AgGridColumn0(viewUtils:import5.ViewUtils,parentInjector:import6.Injector,declarationEl:import2.AppElement):import1.AppView<import3.AgGridColumn> {
  if ((renderType_AgGridColumn === (null as any))) { (renderType_AgGridColumn = viewUtils.createRenderComponentType('',0,import9.ViewEncapsulation.None,styles_AgGridColumn,{})); }
  return new _View_AgGridColumn0(viewUtils,parentInjector,declarationEl);
}