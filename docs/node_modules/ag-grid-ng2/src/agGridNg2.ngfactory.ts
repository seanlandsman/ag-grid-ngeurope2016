/**
 * This file is generated by the Angular 2 template compiler.
 * Do not edit.
 */
 /* tslint:disable */

import * as import0 from '@angular/core/src/render/api';
import * as import1 from '@angular/core/src/linker/view';
import * as import2 from '@angular/core/src/linker/element';
import * as import3 from './agGridNg2';
import * as import4 from '@angular/core/src/linker/query_list';
import * as import5 from '@angular/core/src/linker/view_utils';
import * as import6 from '@angular/core/src/di/injector';
import * as import7 from '@angular/core/src/linker/view_type';
import * as import8 from '@angular/core/src/change_detection/change_detection';
import * as import9 from '@angular/core/src/linker/element_ref';
import * as import10 from './ng2FrameworkFactory';
import * as import11 from '@angular/core/src/metadata/view';
import * as import12 from '@angular/core/src/linker/component_factory';
var renderType_AgGridNg2_Host:import0.RenderComponentType = (null as any);
class _View_AgGridNg2_Host0 extends import1.AppView<any> {
  _el_0:any;
  /*private*/ _appEl_0:import2.AppElement;
  _AgGridNg2_0_5:import3.AgGridNg2;
  _query_AgGridColumn_0_0:import4.QueryList<any>;
  constructor(viewUtils:import5.ViewUtils,parentInjector:import6.Injector,declarationEl:import2.AppElement) {
    super(_View_AgGridNg2_Host0,renderType_AgGridNg2_Host,import7.ViewType.HOST,viewUtils,parentInjector,declarationEl,import8.ChangeDetectorStatus.CheckAlways);
  }
  createInternal(rootSelector:string):import2.AppElement {
    this._el_0 = this.selectOrCreateHostElement('ag-grid-ng2',rootSelector,(null as any));
    this._appEl_0 = new import2.AppElement(0,(null as any),this,this._el_0);
    var compView_0:any = viewFactory_AgGridNg20(this.viewUtils,this.injector(0),this._appEl_0);
    this._AgGridNg2_0_5 = new import3.AgGridNg2(new import9.ElementRef(this._el_0),this._appEl_0.vcRef,this.parentInjector.get(import10.Ng2FrameworkFactory));
    this._query_AgGridColumn_0_0 = new import4.QueryList<any>();
    this._appEl_0.initComponent(this._AgGridNg2_0_5,[],compView_0);
    compView_0.create(this._AgGridNg2_0_5,this.projectableNodes,(null as any));
    this.init([].concat([this._appEl_0]),[this._el_0],[],[]);
    return this._appEl_0;
  }
  injectorGetInternal(token:any,requestNodeIndex:number,notFoundResult:any):any {
    if (((token === import3.AgGridNg2) && (0 === requestNodeIndex))) { return this._AgGridNg2_0_5; }
    return notFoundResult;
  }
  detectChangesInternal(throwOnChange:boolean):void {
    if (((this.numberOfChecks === 0) && !throwOnChange)) { this._AgGridNg2_0_5.ngOnInit(); }
    this.detectContentChildrenChanges(throwOnChange);
    if (!throwOnChange) { if (this._query_AgGridColumn_0_0.dirty) {
      this._query_AgGridColumn_0_0.reset([]);
      this._AgGridNg2_0_5.columns = this._query_AgGridColumn_0_0;
      this._query_AgGridColumn_0_0.notifyOnChanges();
    } }
    this.detectViewChildrenChanges(throwOnChange);
    if (!throwOnChange) { if ((this.numberOfChecks === 0)) { this._AgGridNg2_0_5.ngAfterViewInit(); } }
  }
  destroyInternal():void {
    this._AgGridNg2_0_5.ngOnDestroy();
  }
}
function viewFactory_AgGridNg2_Host0(viewUtils:import5.ViewUtils,parentInjector:import6.Injector,declarationEl:import2.AppElement):import1.AppView<any> {
  if ((renderType_AgGridNg2_Host === (null as any))) { (renderType_AgGridNg2_Host = viewUtils.createRenderComponentType('',0,import11.ViewEncapsulation.None,[],{})); }
  return new _View_AgGridNg2_Host0(viewUtils,parentInjector,declarationEl);
}
export const AgGridNg2NgFactory:import12.ComponentFactory<import3.AgGridNg2> = new import12.ComponentFactory<import3.AgGridNg2>('ag-grid-ng2',viewFactory_AgGridNg2_Host0,import3.AgGridNg2);
const styles_AgGridNg2:any[] = [];
var renderType_AgGridNg2:import0.RenderComponentType = (null as any);
class _View_AgGridNg20 extends import1.AppView<import3.AgGridNg2> {
  constructor(viewUtils:import5.ViewUtils,parentInjector:import6.Injector,declarationEl:import2.AppElement) {
    super(_View_AgGridNg20,renderType_AgGridNg2,import7.ViewType.COMPONENT,viewUtils,parentInjector,declarationEl,import8.ChangeDetectorStatus.CheckAlways);
  }
  createInternal(rootSelector:string):import2.AppElement {
    const parentRenderNode:any = this.renderer.createViewRoot(this.declarationAppElement.nativeElement);
    this.init([],[],[],[]);
    return (null as any);
  }
}
export function viewFactory_AgGridNg20(viewUtils:import5.ViewUtils,parentInjector:import6.Injector,declarationEl:import2.AppElement):import1.AppView<import3.AgGridNg2> {
  if ((renderType_AgGridNg2 === (null as any))) { (renderType_AgGridNg2 = viewUtils.createRenderComponentType('',0,import11.ViewEncapsulation.None,styles_AgGridNg2,{})); }
  return new _View_AgGridNg20(viewUtils,parentInjector,declarationEl);
}